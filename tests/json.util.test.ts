// Generated by CodiumAI

import { JSONs } from '@/common/utils/json'
import { describe, expect, it } from 'vitest'

describe('Parse JSON', () => {
	// Should return null if argument is null
	it('should return null when argument is null', () => {
		const result = JSONs.parse(null)
		expect(result).toBeNull()
	})

	it('should throw error when argument is not a string', () => {
		const result = JSONs.parse({ name: 'John', age: NaN })
		expect(result).toStrictEqual({ name: 'John', age: NaN })
	})

	// Should return null if argument is empty string
	it('should return null when argument is a string', () => {
		const input = 'Hello World'
		const result = JSONs.parse(input)
		expect(result).toBe(input)
	})

	//
	it('should return parsed object when argument is a valid JSON object', () => {
		const input = '{"name": "John", "age": 30}'
		const result = JSONs.parse(input)
		expect(result).toStrictEqual({ name: 'John', age: 30 })
	})
})

describe('Stringify to JSON', () => {
	// Should return null if argument is null
	it('should return null when argument is null', () => {
		const result = JSONs.stringify(null)
		expect(result).toBeNull()
	})

	// Should return null if argument is empty string
	it('should return null when argument is a string', () => {
		const result = JSONs.stringify('Hello World')
		expect(result).toBe('Hello World')
	})

	it('should return parsed object when argument is a valid JSON object', () => {
		const result = JSONs.stringify({ name: 'John', age: 30 })
		expect(result).toBeTypeOf('string')
		expect(JSONs.isValid(result)).toBe(true)
	})
})

describe('Check if value is a valid JSON', () => {
	it('should return false when given a invalid JSON string', () => {
		const arg = 'Hello World'
		const result = JSONs.isValid(arg)
		expect(result).toBe(false)
	})

	// Returns true when given a valid JSON string
	it('should return true when given a valid JSON string', () => {
		const input = '{"name": "John", "age": 30}'
		const result = JSONs.isValid(input)
		expect(result).toBe(true)
	})

	// Returns false when given a string that is only partially valid JSON
	it('should return false when given a string that is only partially valid JSON', () => {
		const input = '{"name": "John", "age": 30, city: "New York"}'
		const result = JSONs.isValid(input)
		expect(result).toBe(false)
	})
})
